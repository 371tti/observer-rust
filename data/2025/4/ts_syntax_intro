# TypeScriptの構文入門書

この記事は、TypeScriptの基本的な構文とその活用方法を初学者向けにまとめたものです。TypeScriptはJavaScriptに型付けの概念を導入し、大規模なプロジェクトでも安心して開発できるよう設計されています。ここでは、変数宣言、データ型、関数、クラス、インターフェース、ジェネリクスなど、TypeScriptの主要な機能について詳しく解説します。

---

## 1. はじめに

TypeScriptはJavaScriptのスーパーセットであり、静的型付けを実現するために利用されます。これにより、コードの保守性や可読性が向上し、大規模なアプリケーション開発に非常に役立ちます。本書では、初めてTypeScriptを学ぶ方でもすぐに理解できるよう、基本から応用までをカバーしています。

---

## 2. 変数宣言とスコープ

### 2.1 let と const

TypeScriptでも `let` や `const` を利用して変数を宣言します。`let` は再代入可能な変数、`const` は不変な変数として使います。

```typescript
let mutableValue: number = 10;
mutableValue = 20;

const immutableValue: string = 'Hello, TypeScript';
// immutableValue = '変更不可'; // エラーとなる
```

### 2.2 var の利用

`var` は従来のJavaScriptの変数宣言ですが、ブロックスコープがなく、予期せぬ動作を引き起こすことがあるため、主に `let` や `const` が推奨されます。

---

## 3. データ型

TypeScriptは静的型付け言語です。以下のように基本的なデータ型を宣言できます。

### 3.1 プリミティブ型

- number
- string
- boolean
- null と undefined

```typescript
let count: number = 42;
let name: string = 'Alice';
let isActive: boolean = true;
let unknown: undefined = undefined;
let nothing: null = null;
```

### 3.2 配列型とタプル

配列は `Array<型>` や `型[]` と表記します。タプルは固定長かつ異なる型を格納します。

```typescript
let numberArray: number[] = [1, 2, 3];
let stringArray: Array<string> = ['a', 'b', 'c'];

// タプル
let person: [string, number] = ['Bob', 25];
```

### 3.3 オブジェクト型

オブジェクトは型エイリアスやインターフェースを使って定義されます。

```typescript
type User = {
  id: number;
  name: string;
  email?: string; // オプショナルプロパティ
};

const user: User = {
  id: 1,
  name: 'John Doe'
};
```

---

## 4. 関数

### 4.1 関数宣言

TypeScriptでは、関数にも型注釈をつけることで、引数や戻り値の型を明示します。

```typescript
function add(x: number, y: number): number {
  return x + y;
}

const sum = add(5, 7);
```

### 4.2 アロー関数

アロー関数を使用することで、より簡潔に関数を記述できます。

```typescript
const multiply = (a: number, b: number): number => a * b;

console.log(multiply(3, 4));
```

---

## 5. クラスとオブジェクト指向

TypeScriptはクラスをサポートしており、オブジェクト指向プログラミングが可能です。

### 5.1 クラス宣言

```typescript
class Animal {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  move(distance: number = 0): void {
    console.log(`${this.name} moved ${distance}m`);
  }
}

const dog = new Animal('Dog');
dog.move(10);
```

### 5.2 アクセス修飾子

クラスフィールドには `public`, `private`, `protected` のアクセス修飾子が利用できます。これにより、情報の隠蔽が実現できます。

```typescript
class Person {
  private age: number;

  constructor(age: number) {
    this.age = age;
  }

  public getAge(): number {
    return this.age;
  }
}

const p = new Person(30);
console.log(p.getAge());
```

### 5.3 継承

クラスは `extends` キーワードを使って継承できます。

```typescript
class Employee extends Person {
  position: string;

  constructor(age: number, position: string) {
    super(age);
    this.position = position;
  }

  public describe(): void {
    console.log(`Age: ${this.getAge()}, Position: ${this.position}`);
  }
}

const emp = new Employee(28, 'Developer');
emp.describe();
```

---

## 6. インターフェース

### 6.1 インターフェースの基本

インターフェースにより、オブジェクトの構造を定義できます。型チェックやコードの自動補完に役立ちます。

```typescript
interface Car {
  make: string;
  model: string;
  year: number;
}

const myCar: Car = {
  make: 'Toyota',
  model: 'Corolla',
  year: 2020
};
```

### 6.2 関数のインターフェース

関数の型もインターフェースで定義することが可能です。

```typescript
interface StringFormat {
  (str: string, isUpper: boolean): string;
}

const formatString: StringFormat = function(str, isUpper) {
  return isUpper ? str.toUpperCase() : str.toLowerCase();
};

console.log(formatString('Hello', true));
```

---

## 7. ジェネリクス

ジェネリックは、型安全性を保ちながら柔軟なコードを書くために利用されます。

```typescript
function identity<T>(arg: T): T {
  return arg;
}

const num = identity<number>(100);
const str = identity<string>('Generics');
```

ジェネリックは、クラスやインターフェースにも適用可能です。

```typescript
class Box<T> {
  content: T;
  constructor(content: T) {
    this.content = content;
  }
  getContent(): T {
    return this.content;
  }
}

const numberBox = new Box<number>(123);
console.log(numberBox.getContent());
```

---

## 8. 型の詳細

### 8.1 合併型と交差型

TypeScriptでは、型同士を組み合わせる方法として合併型（Union Type）と交差型（Intersection Type）があります。

```typescript
// 合併型
function process(input: number | string): void {
  if (typeof input === 'number') {
    console.log(input * 2);
  } else {
    console.log(input.toUpperCase());
  }
}

// 交差型
interface A { a: number; }
interface B { b: string; }

type AB = A & B;
const combined: AB = {a: 1, b: 'hello'};
```

### 8.2 型ガード

型ガードを使用すると、ランタイムで変数の型を絞り込み、適切な処理を実行できます。

```typescript
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function example(value: number | string) {
  if (isString(value)) {
    console.log(value.toUpperCase());
  } else {
    console.log(value * 2);
  }
}
```

---

## 9. モジュールと名前空間

TypeScriptはECMAScriptモジュールシステムをサポートしており、`import` と `export` によりコードの分割管理が可能です。

```typescript
// math.ts
export function add(a: number, b: number): number {
  return a + b;
}

// app.ts
import { add } from './math';
console.log(add(5, 10));
```

また、古いコードベースやレガシーな状況では名前空間（module）も利用できますが、モジュール化されたコードが一般的です。

---

## 10. まとめ

この記事では、TypeScriptの主要な構文と機能についてまとめました。TypeScriptは静的型付けの恩恵を受けながら、JavaScriptとの互換性を保っており、これにより大規模なアプリケーションでも信頼性の高いコードを書くことが可能です。以下のポイントを押さえておきましょう。

- 変数宣言は `let` と `const` を使い、`var` の使用は控える
- プリミティブ型、配列、タプル、オブジェクト型の使い分け
- 関数定義における型注釈
- クラス、インターフェース、ジェネリクスを使ったオブジェクト指向プログラミング
- 合併型、交差型、型ガードの活用
- モジュールシステムによるコードの分割

TypeScriptを学び始めることで、より安全で可読性の高いコードが書けるようになります。公式ドキュメントやコミュニティリソースも積極的に活用して、さらに深い知識を得てください。

参考情報:
- [TypeScript公式サイト](https://www.typescriptlang.org/)
- [TypeScriptハンドブック](https://www.typescriptlang.org/docs/handbook/intro.html)

Happy coding in TypeScript (´-ω-`)
