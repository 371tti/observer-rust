# MongoDB Storage Engine Documentation

## はじめに
MongoDBのストレージエンジンは、データの永続化やメモリ管理、トランザクション、圧縮などの機能を実現するコアコンポーネントです。本ドキュメントでは、主要なストレージエンジンの特徴や設定方法、運用時のポイントを解説します。

---

## 1. ストレージエンジンの種類

### 1.1 WiredTiger
- デフォルトのストレージエンジン（MongoDB 3.2以降）
- 特徴
  - マルチスレッド対応で高い並行性
  - ドキュメントレベルのロック
  - 圧縮機能（Snappy、Zlib、Zstd）
  - ジャーナリングによるクラッシュ耐性
- 主な設定
  - `--storageEngine wiredTiger`
  - 圧縮設定: `wiredTigerCollectionBlockCompressor: zstd`
  - キャッシュサイズ: `wiredTiger.engineConfig.cacheSizeGB`

### 1.2 MMAPv1 (非推奨)
- MongoDB 3.0以前のデフォルト（3.2で非推奨、4.0で削除）
- 特徴
  - コレクション全体のロック
  - シンプルな実装
- 注意点
  - 高い書き込み負荷時にロック競合が発生しやすい
  - 現在は新規環境での利用は推奨されない

### 1.3 In-Memory Storage Engine
- 全データをメモリ上に保持（永続化なし）
- テストやキャッシュ用途に最適
- 設定: `--storageEngine inMemory`
- メモリ使用上限: `inMemoryEngineConfig.inMemorySizeGB`

### 1.4 EphemeralForTest
- テスト用の一時ストレージエンジン
- データは再起動で消失
- 自動的に選択されることはなく、テスト目的で明示的に指定

---

## 2. ジャーナリング

- 障害発生時のデータ整合性を保つ仕組み
- 各書き込み操作をログに追記
- デフォルトで有効（WiredTigerではアクションログ）
- 設定例:
```yaml
storage:
  journal:
    enabled: true
```

---

## 3. 圧縮とパフォーマンス

- WiredTigerではブロック単位で圧縮可能
- Snappy: 高速だが圧縮率は控えめ
- Zlib / Zstd: 圧縮率重視
- 圧縮によるCPU負荷とI/O削減のバランスを考慮


---

## 4. 設定とチューニング

### 4.1 MongoDB設定ファイル例 (mongod.conf)
```yaml
storage:
  engine: wiredTiger
  wiredTiger:
    engineConfig:
      cacheSizeGB: 2
      journalCompressor: snappy
    collectionConfig:
      blockCompressor: zstd
  journal:
    enabled: true
t
```

### 4.2 運用のポイント
- モニタリング: `mongostat`, `mongotop` やMongoDB Atlasのメトリクス
- 定期バックアップとリストアテスト
- ストレージ容量とメモリ使用量の予測


---

## 5. トラブルシューティング

| 問題                 | 原因                     | 対策                              |
|----------------------|--------------------------|-----------------------------------|
| ジャーナル遅延       | ディスクI/Oのボトルネック | RAID構成やSSDへの移行            |
| 頻繁なロック競合     | 高い書き込み負荷         | シャーディング、WiredTigerへ移行 |
| メモリ不足           | キャッシュサイズ超過     | キャッシュサイズ設定の見直し     |


---

## 参考情報
- 公式ドキュメント: https://docs.mongodb.com/manual/core/storage-engines/
- MongoDB WiredTiger Whitepaper: https://www.mongodb.com/whitepapers

---
*この記事は初学者から運用エンジニアまでを対象に、MongoDBのストレージエンジンについて体系的にまとめたものです。*