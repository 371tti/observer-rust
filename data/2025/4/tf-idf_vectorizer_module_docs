# tf-idf-vectorizer モジュールドキュメント

本記事では Rust 製 TF-IDF ライブラリ `tf-idf-vectorizer` の主要モジュールと API を解説します。コードを理解しやすく、開発やカスタマイズの際に役立つリファレンスとしてご活用ください。

## 1. vectorizer
ライブラリのメインエントリポイント。ベクトルライザの構築と検索機能を提供します。

### TFIDFVectorizer (エイリアス: Vectorizer)
- 構築: `Vectorizer::new()`
- ドキュメント追加: `add_doc(id: String, tokens: &[&str])`
- クエリ生成: `generate_query(tokens: &[&str]) -> ZeroSpVec`
- 検索: `search_cosine_similarity_parallel(query: &ZeroSpVec, threads: usize) -> Vec<(String, f64)>`
  - Cosine 類似度を並列計算し、結果をスコア順に返します。

## 2. vectorizer::index
ドキュメント集合の管理やインデックス機能を担います。

### Index
- 初期化: `Index::new()`
- ドキュメント管理:
  - `add_doc(doc_id: String, tokens: &[&str])`
  - `remove_doc(doc_id: &str)`
- 検索:
  - `generate_query(tokens: &[&str])`
  - `search_cosine_similarity(query: &ZeroSpVec) -> Vec<(String, f64)>`
  - `search_cosine_similarity_parallel(query: &ZeroSpVec, threads: usize)`

## 3. vectorizer::token
TF-IDF の核となるトークン頻度計算を行います。

### TokenFrequency
- 初期化: `TokenFrequency::new()`
- トークン追加: `add_tokens(tokens: &[&str])`
- 単語頻度取得 (TF): `tf_token(token: &str) -> f64`
- 逆文書頻度取得 (IDF): `idf_token(token: &str) -> f64`
- TF-IDF スコア計算: `tf_idf(token: &str, total_docs: usize) -> f64`

## 4. utils
ユーティリティ関数を提供します。

### utils::math::vector::ZeroSpVec
- スパースベクトル構造体
- 0 値を含まない要素のみ保持し、高速なベクトル演算をサポート
- 基本的な演算: 加算、内積、ノルム計算など

---
この記事は [tf-idf-vectorizer GitHub リポジトリ](https://github.com/371tti/tf-idf-vectorizer) を参考に作成しました。ライブラリのインストールや詳細な使用例はリポジトリ README をご覧ください。