# MongoDBのストレージエンジンにおけるデータ整合化技術

## はじめに
MongoDBはドキュメント指向のNoSQLデータベースであり、複数のストレージエンジンをサポートしています。特にデフォルトの**WiredTiger**はMVCC（Multi-Version Concurrency Control）に基づく高性能エンジンで、ドキュメントレベルのロックや圧縮、チェックポイントなど、さまざまな整合化技術を備えています。本記事では、MongoDBストレージエンジンが提供するデータ整合化技術の仕組みと設定方法、および各技術のメリットや注意点を詳しく解説します。

---

## 1. ストレージエンジンの概要
### 1.1 サポートされるエンジン
- **WiredTiger**（デフォルト）: 圧縮、MVCC、ドキュメントレベルロック
- **MMAPv1**（旧エンジン）: コレクションレベルロック、ジャーナリング
- **In-Memory**: RAM上にのみ配置、永続化不要なケース向け

### 1.2 選択のポイント
- 高スループット・高同時実行性 → WiredTiger
- レガシー互換性 → MMAPv1
- 読み取り専用の高速アクセス → In-Memory

---

## 2. データ整合化の基本概念
- **整合性（Consistency）**: データベースが常に一貫した状態を維持する性質
- **Durability（永続性）**: 書き込み完了後、障害時にもデータが失われないこと
- **Isolation（独立性）**: 複数トランザクションの同時実行時に相互干渉しないこと

---

## 3. WiredTigerにおけるMVCC
WiredTigerはMVCCを採用し、読み取りと書き込みの分離を実現します。
- **スナップショット読み取り**: クライアントの読み取りは一貫した過去のスナップショットを参照
- **書き込み時にバージョンを増分**: 各ドキュメントは新しいバージョンとして格納される

### メリット
- 読み取り→読み取りロック不要
- 書き込み→ドキュメント単位ロック

---

## 4. ジャーナリングとチェックポイント
### 4.1 ジャーナリング
- **目的**: 障害発生時のロールフォワード
- `journal.commitIntervalMs` でコミット間隔を設定（既定100ms）
- ディスク書き込みを高速化しつつ、小単位でログを保持

### 4.2 チェックポイント
- 定期的にディスクにスナップショットをフラッシュ
- `storage.wiredTiger.engineConfig.cacheSizeGB` でキャッシュサイズを制御
- **利点**: リカバリ時にジャーナル適用範囲が限定され、復旧が高速化

---

## 5. トランザクションと整合性
MongoDBは4.0以降、複数ドキュメントのトランザクションをサポート。
- **Write Concern**: `w:1`, `w:majority` など、書き込み永続性のレベルを選択
- **Read Concern**: `local`, `majority`, `snapshot` で読み取り整合性を指定
- トランザクション内では両者の設定が適用され、一貫性を保証

---

## 6. リプリケーションレイヤーとの連携
- **レプリカセット**: プライマリ→セカンダリにoplogを適用
- **同期モード**: `--syncDelay`で適用間隔を調整
- セカンダリへの遅延レプリケーションや故障時フェイルオーバーでの一貫性確保

---

## 7. パフォーマンスとチューニング
- **キャッシュサイズ**: 大きすぎるとメモリ圧迫、小さすぎるとI/O増加
- **圧縮設定**: `block_compressor`=`snappy`/`zstd`でディスク使用量を削減
- **ジャーナル無効化**: テスト用途のみ推奨

---

## まとめ
WiredTigerをはじめとするMongoDBのストレージエンジンは、MVCC、ジャーナリング、チェックポイント、トランザクション制御を通じて高いデータ整合性と耐障害性を実現します。ユースケースに応じて各設定を最適化し、パフォーマンスと耐障害性のバランスを取ることが重要です。

---

## 参考資料
- MongoDB公式ドキュメント: Storage Engines (https://www.mongodb.com/docs/manual/core/storage-engines/)
- MongoDB公式ドキュメント: WiredTiger Storage Engine (https://www.mongodb.com/docs/manual/core/wiredtiger/)
- Developer Blog: Deep Dive into WiredTiger’s MVCC
