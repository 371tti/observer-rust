# Javaの構文入門記事

こんにちは、みなさん(´-ω-`) 

この記事では、Javaの基本構文を丁寧に説明していきます。Javaは オブジェクト指向プログラミング言語として多くの開発者に支持されています。初心者でも理解できるよう、様々な側面からJavaの構文を学んでいきましょう。

---

## 1. Javaの基本構造

Javaプログラムはクラスを基本単位として構築されます。最も基本的なプログラムは次のようになります。

```java
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

- **クラス**：プログラムの設計図
- **メソッド**：クラスに属する機能的ブロック
- **mainメソッド**：プログラムのエントリーポイント

---

## 2. 変数とデータ型

Javaは静的型付け言語です。変数を宣言するときは必ずデータ型を明記します。

### 主なデータ型

- **int**: 整数型
- **double**: 浮動小数点数型
- **boolean**: 真偽値
- **char**: 文字
- **String**: 文字列（オブジェクト型）

```java
int a = 10;
double b = 3.14;
boolean flag = true;
char letter = 'A';
String message = "Hello";
```

---

## 3. 演算子

Javaで利用される演算子には以下のような種類があります。

- 算術演算子: `+`, `-`, `*`, `/`, `%`
- 比較演算子: `==`, `!=`, `>`, `<`, `>=`, `<=`
- 論理演算子: `&&`, `||`, `!`

例:

```java
int x = 5, y = 10;
boolean result = (x < y) && (x > 0);
```

---

## 4. 制御構文

### 4.1 if文, else if, else

条件分岐に使用されます。

```java
if(a > b) {
    System.out.println("a is greater");
} else if(a == b) {
    System.out.println("a equals b");
} else {
    System.out.println("b is greater");
}
```

### 4.2 switch文

値に応じた分岐に適しています。

```java
int day = 3;
switch(day) {
    case 1:
        System.out.println("Monday");
        break;
    case 2:
        System.out.println("Tuesday");
        break;
    default:
        System.out.println("Other day");
        break;
}
```

### 4.3 for文, while文, do-while文

ループ処理の基本構文です。

```java
// for文
for (int i = 0; i < 5; i++) {
    System.out.println(i);
}

// while文
int j = 0;
while(j < 5) {
    System.out.println(j);
    j++;
}

// do-while文
int k = 0;
do {
    System.out.println(k);
    k++;
} while(k < 5);
```

---

## 5. 配列とコレクション

### 5.1 配列

```java
int[] numbers = {1, 2, 3, 4, 5};
```

### 5.2 ArrayList

コレクションの代表例で、動的配列として使われます。

```java
import java.util.ArrayList;

ArrayList<String> list = new ArrayList<>();
list.add("apple");
list.add("banana");
```

---

## 6. メソッドと引数

メソッドは機能をまとめるための単位です。

```java
public int add(int a, int b) {
    return a + b;
}
```

メソッドは必要に応じてオーバーロードできます。

---

## 7. オブジェクト指向の基礎

Javaはオブジェクト指向言語です。以下が基本概念です:

- **クラスとオブジェクト**：実世界のモデリング
- **継承**：既存クラスを拡張
- **ポリモーフィズム**：多態性（同じインタフェースで異なる実装）
- **カプセル化**：内部データの保護

```java
public class Animal {
    public void speak() {
        System.out.println("Animal sound");
    }
}

public class Dog extends Animal {
    @Override
    public void speak() {
        System.out.println("Bark");
    }
}
```

---

## 8. 例外処理

エラーが発生したときにプログラムがクラッシュしないようにするための仕組みです。

```java
try {
    int result = 10 / 0;
} catch (ArithmeticException e) {
    System.out.println("Error: " + e.getMessage());
} finally {
    System.out.println("Execution complete");
}
```

---

## 9. ラムダ式とストリームAPI（Java 8以降）

Java 8ではラムダ式が導入され、コードを簡潔に記述できるようになりました。

```java
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
// ラムダ式で要素をフィルタリング
numbers.stream()
    .filter(n -> n % 2 == 0)
    .forEach(System.out::println);
```

---

## 10. まとめ

Javaの構文は多岐にわたりますが、基本を押さえることで効率的なプログラミングが可能になります。この記事で紹介した内容を実践し、継続的に学習することで、より高度なJavaプログラミングが実現できます。

### 参考文献

- [Oracle公式Javaドキュメント](https://docs.oracle.com/en/java/)
- [Java入門 - W3Schools](https://www.w3schools.com/java/)

以上、簡単なJavaの構文入門記事でした。読みやすく、理解しやすい内容になっていると思います。楽しく学んでくださいね。
