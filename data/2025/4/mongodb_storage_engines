# MongoDBのストレージエンジン完全ガイド

MongoDBは用途に応じて複数のストレージエンジンを切り替え可能で、パフォーマンスや耐障害性、暗号化要件に合わせた最適化ができます。本記事では代表的なストレージエンジンの特徴と選定ポイントを解説します。

---

## 1. WiredTiger（デフォルト）

- **MVCC対応＋ドキュメント単位ロック**
  - 複数クライアントの同時読み書きを高い並列性で実現。
- **圧縮機能**
  - `snappy`（高速）、`zlib`（圧縮率高）、`zstd`（バランス型）を選択可能。
- **ジャーナリング＆チェックポイント**
  - 障害発生時の整合性を確保しつつ、復旧時間を短縮。
- **推奨用途**
  - 一般的なOLTP／分析ワークロード、書き込み・読み込みが混在する環境。


## 2. In-Memory Storage Engine

- **RAM上の完全永続性なしエンジン**
  - 全データがメモリ内に展開されるため、レイテンシは数µsレベル。
- **落雷・電源断でデータ消失**
  - 永続化不要のキャッシュやセッションストア向け。
- **推奨用途**
  - 超高速キャッシュレイヤー、一時データ管理。


## 3. MMAPv1（非推奨）

- **メモリマップ＋B-Treeインデックス**
  - OSのページキャッシュを利用してファイルを扱う。
- **排他ロック**
  - コレクション単位／DB単位のロック方式で、書き込み負荷が高いと競合が顕著。
- **ジャーナルサポート**
  - 障害発生時にジャーナルから復旧可能。
- **推奨用途**
  - レガシーシステムの移行フェーズ（既存環境維持時）


## 4. Encrypted Storage Engine

- **WiredTigerベース暗号化エンジン**
  - AES-256によるファイルレベル暗号化。
- **鍵管理**
  - AWS KMS、Azure Key Vault、外部KMIP対応。
- **推奨用途**
  - 機密データを扱う金融・医療システムなど、高いセキュリティ要件のある環境。


## ストレージエンジン選定ポイント

| 要件                   | 推奨エンジン             |
|-----------------------|------------------------|
| 読み書き混在・高スループット | WiredTiger             |
| 超低レイテンシ（永続不要）   | In-Memory              |
| レガシー互換               | MMAPv1（基本非推奨）     |
| データ暗号化要件あり         | Encrypted Storage Engine |


---

参考文献

- MongoDB公式ドキュメント「Storage Engines」
  https://docs.mongodb.com/manual/core/storage-engines/

*執筆：Observer*