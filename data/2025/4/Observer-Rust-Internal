# Observer Rust 内部実装ドキュメント

## 目次
1. プロジェクト構成
2. エントリポイント (`main.rs`)  
3. コマンドハンドリング  
4. ツール連携モジュール  
5. メモリ管理  
6. 非同期タスクとエラーハンドリング  
7. 設定 (`config.json`)  
8. テストとCI  

---

## 1. プロジェクト構成
```
observer-rust/
├─ src/
│  ├─ main.rs          // アプリ起動とDiscord接続
│  ├─ bot.rs           // Bot構造体の定義
│  ├─ commands/        // 各種コマンド実装 (ping, ask, deep_search…)
│  │  ├─ mod.rs
│  │  ├─ ping.rs
│  │  └─ ask.rs
│  ├─ tools/           // ツール呼び出しラッパー
│  │  ├─ browser.rs
│  │  ├─ memory.rs
│  │  └─ time.rs
│  ├─ config.rs        // 設定ファイル読み込み
│  ├─ errors.rs        // 共通エラー定義
│  └─ utils.rs         // 共通ヘルパー関数
└─ config.json.example
```

## 2. エントリポイント (`main.rs`)
- `tokio::main` で非同期実行環境を構築  
- `config.json`を読み込む (`config.rs`)  
- Discordクライアント初期化  
- `Bot::start()` を呼ぶ

```rust
#[tokio::main]
async fn main() -> Result<(), Error> {
  let cfg = Config::load("config.json")?;
  let bot = Bot::new(&cfg).await?;
  bot.start().await?;
  Ok(())
}
```

## 3. コマンドハンドリング
- `commands/mod.rs` で各コマンドを登録  
- `ask`, `deep_search` 等は共通の `Command` トレイトを実装  
- 受け取ったメッセージごとにマッチングして `execute()` を呼び出す

```rust
trait Command {
  fn name(&self) -> &str;
  async fn execute(&self, ctx: &Context, args: Args) -> Result<()>;
}
```

例: `ping.rs`
```rust
pub struct Ping;
#[async_trait]
impl Command for Ping {
  fn name(&self) -> &str { "ping" }
  async fn execute(&self, ctx: &Context, _args: Args) {
    ctx.reply("Pong 🏓").await?;
  }
}
```

## 4. ツール連携モジュール
### browser.rs
- `reqwest` または `playwright` 経由でHTTPリクエスト  
- HTMLパースは `scraper` クレートで対応  
- `BrowserTool` 構造体で `search` / `scrape` メソッドを提供

### memory.rs
- `memory_tool` APIラッパー  
- 会話履歴をキーごとに `add`, `push`, `get` で操作

### time.rs
- `get_location_time` API呼び出しラッパー

## 5. メモリ管理
- Redisなどは使わず、独自のファイルバックエンド
- メモリ領域を `MemoryStore` で保持し、定期的にバックアップ

## 6. 非同期タスクとエラーハンドリング
- `anyhow` + `thiserror` でエラーを一元管理 (errors.rs)  
- 各非同期処理は `tokio::spawn` でバックグラウンド実行

## 7. 設定 (`config.json`)
```jsonc
{
  "bot_token": "",
  "openai_api_key": "",
  "model_endpoint": "",
  "tools": {"enable_browser": true, "enable_memory": true},
  "system_prompt": ""
}
```
`config.rs` で `serde` からデシリアライズ

## 8. テストとCI
- `commands` や `tools` はユニットテストあり  
- GitHub Actionsで `cargo test` / `cargo fmt -- --check` などを実行

---

*本ドキュメントはobserver-rustの内部構造と実装ロジックを理解するための技術資料です。初心者から上級者まで参照しやすいように構成しています。*