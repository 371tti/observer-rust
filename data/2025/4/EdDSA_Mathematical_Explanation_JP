# EdDSAの数学的解説

EdDSA（Edwards-curve Digital Signature Algorithm）は、Edwards曲線という特殊な楕円曲線を用いたデジタル署名方式です。このアルゴリズムは、その数学的な性質により、効率的かつ安全な署名処理を実現しています。ここでは、EdDSAの鍵生成、署名生成、検証過程を数学的な視点から解説します。

## 1. Edwards曲線の基本形

EdDSAでは、主に次の形のEdwards曲線が用いられます:

  x² + y² = 1 + d·x²y²

ここで、dは曲線パラメータであり、曲線の性質（非特異性や順方向性など）を決定します。この形状により、加法演算がシンプルかつ効率的に行われるという利点があります。

## 2. 鍵生成の数学的背景

### シードからの秘密鍵生成

1. ランダムなバイト列（シード）を生成し、このシードに対してハッシュ関数（通常、SHA-512など）を適用します。これにより、ハッシュ値が得られます。
2. 得られたハッシュ値の一部を修正（例えば、最下位ビットのクリアや特定ビットのセットなど）して、曲線の順序に適合するスカラー値（秘密鍵）とします。

### 公開鍵の計算

1. 公開鍵は、秘密鍵を用いて基点（定められた曲線上の点）に対するスカラー乗算を行うことで得られます。
2. 数学的には、公開鍵 P は次のように定義されます:

  P = [k]B

   ここで、kは秘密鍵、Bは基点です。楕円曲線上のスカラー乗算は、加算の繰り返しを通じて計算されます。

## 3. 署名生成の数学的プロセス

EdDSAの署名生成は、以下のステップから成ります。

### ノンスの計算

1. メッセージ M と秘密鍵のハッシュ（またはその一部）を組み合わせ、再びハッシュ値を算出します。
2. そのハッシュ値を整数に変換して、ノンス r を決定します。

### Rの計算

1. ノンス r を用いて、曲線上の点 R を計算します:

  R = [r]B

   ここで、rがノンス、Bは先ほどと同じ基点です。

### チャレンジ値の算出

1. ハッシュ関数を用い、R、公開鍵 A、そしてメッセージ M を連結してハッシュを計算します:

  h = H(R || A || M)

   hは、署名の一部に使われるチャレンジ値であり、楕円曲線の順序に従う整数に変換されます。

### 署名の最終構成

1. 署名は、(R, s) のペアで構成され、sは以下のように計算されます:

  s = (r + h · k) mod L

   ここで、kは秘密鍵、Lは曲線の順序です。これにより、署名全体が数学的な関係式としてまとめられ、検証時にも同じ手順で再計算が可能となります。

## 4. 署名検証

署名 (R, s) を受け取った際、検証者は次のように署名の正当性を確認します:

1. チャレンジ値 h を再計算します:

  h = H(R || A || M)

2. 以下の等式が成り立つことを確認します:

  [s]B = R + [h]A

   これは、楕円曲線上での点の加法およびスカラー乗算を用いた等式で、左辺と右辺が一致すれば署名は正当と認められます。

## 5. 数学的な安全性

### 楕円曲線離散対数問題

EdDSAの安全性は、楕円曲線離散対数問題（ECDLP）の難しさに依存しています。これは、与えられた基点 B と公開鍵 P から、秘密鍵 k を計算することが非常に困難であるという問題です。

### 定数時間演算

実装面では、すべての計算過程（特にスカラー乗算）は定数時間で行われ、タイミング攻撃のリスクを低減するよう工夫されています。

## まとめ

EdDSAは、Edwards曲線の効率的な数学的性質を活用することで、高速かつ安全なデジタル署名を実現しています。鍵生成から署名、検証まで、各ステップは明確な数学的背景に裏打ちされており、楕円曲線離散対数問題の困難性によりその安全性が保証されています。

(情報源: RFC 8032, Edwards Curve - Wikipedia)
