# Rustの構文入門書

この記事では、Rustの基本的な構文について詳しく解説します。読み進めることで、Rustプログラミングの基礎から応用まで、扱い方が分かるようになるはずです。この記事は初学者向けに作られており、10分以上の読書時間を見込んでいます。

---

## 1. はじめに

Rustは高速で、安全性に重点を置いたシステムプログラミング言語です。メモリ管理を自動化しながらも、コンパイル時のチェックによってバグを未然に防ぐ仕組みが特徴です。本書は、Rustの文法や構造、主な機能についてまとめています。

---

## 2. 基本文法

### 2.1 変数と定数

Rustでは、`let`キーワードを使って変数を定義します。デフォルトでは不変(immutable)ですが、`mut`を指定することで可変変数にできます。

```rust
// 不変な変数
default_num: i32 = 5;
let x = 5;

// 可変変数
let mut y = 10;
y = 20;

// 定数
const MAX_POINTS: u32 = 100_000;
```

### 2.2 データ型

Rustには主に以下のデータ型があります：

- スカラー型: 整数、浮動小数点、ブーリアン、文字
- 複合型: タプル、配列

```rust
// 整数型
let a: i32 = 42;

// 浮動小数点数
let b: f64 = 3.14;

// ブーリアン
let truth: bool = true;

// 文字
let c: char = 'A';

// タプル
let tup: (i32, f64, u8) = (500, 6.4, 1);
let (x, y, z) = tup; // 分解して利用

// 配列
let arr = [1, 2, 3, 4, 5];
```

---

## 3. 制御構文

### 3.1 条件分岐

Rustでは `if` と `else` を使って条件分岐を行います。条件式は必ずブール値を返す必要があります。

```rust
let number = 6;

if number % 2 == 0 {
    println!("even");
} else {
    println!("odd");
}
```

### 3.2 ループ構文

Rustでは、`loop`, `while`, `for` の三種類のループが利用可能です。

```rust
// loop: 無限ループ。必要に応じて break する
let mut count = 0;
loop {
    count += 1;
    if count == 5 {
        break;
    }
    println!("count = {}", count);
}

// while ループ
let mut index = 0;
while index < 5 {
    println!("index = {}", index);
    index += 1;
}

// for ループ: イテレータを使ったループ
for number in 1..6 {
    println!("number = {}", number);
}
```

---

## 4. 関数とクロージャ

### 4.1 関数定義

Rustでは関数を`fn`キーワードで定義します。関数は型が明確に指定され、戻り値がある場合は`->`で明示します。

```rust
fn add(a: i32, b: i32) -> i32 {
    a + b // セミコロンを付けないと値が返される
}

fn main() {
    let sum = add(5, 10);
    println!("Sum is {}", sum);
}
```

### 4.2 クロージャ

クロージャはその場で定義できる無名の関数です。環境の変数をキャプチャできる点が特徴です。

```rust
let x = 4;
let square = |n: i32| n * n + x;

println!("square(3) = {}", square(3));
```

---

## 5. 所有権、借用、ライフタイム

Rustの核となる概念です。これにより、メモリの安全性が保証されます。

### 5.1 所有権 (Ownership)

各値は所有者を持ち、所有権が移動（ムーブ）することでメモリの管理が行われます。

```rust
let s1 = String::from("hello");
let s2 = s1; // s1は使えなくなる
```

### 5.2 借用 (Borrowing)

参照を使い、変数の所有権を移動せずに値にアクセスできます。ミュータブルな参照は同時に一つだけ許容されます。

```rust
let s = String::from("hello");

// 不変な参照
let len = calculate_length(&s);

fn calculate_length(s: &String) -> usize {
    s.len()
}

// ミュータブルな参照
let mut s_mut = String::from("hello");
change(&mut s_mut);

fn change(s: &mut String) {
    s.push_str(", world");
}
```

### 5.3 ライフタイム (Lifetimes)

ライフタイムは参照が有効な期間を表し、コンパイラによってチェックされます。複雑なケースでもライフタイムを明示することができます。

```rust
fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {
    if s1.len() > s2.len() { s1 } else { s2 }
}
```

---

## 6. 構造体と列挙型

### 6.1 構造体 (Struct)

Rustでは構造体を用いて複数のデータをまとめることができます。

```rust
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

let user = User {
    username: String::from("rustacean"),
    email: String::from("rust@example.com"),
    sign_in_count: 1,
    active: true,
};
```

### 6.2 列挙型 (Enum)

列挙型は値が取りうる複数の形（バリアント）を定義できます。

```rust
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

let msg = Message::Write(String::from("hello"));
```

---

## 7. パターンマッチング

パターンマッチングは、値がどのバリアントに該当するかを調べるために用いられます。

```rust
let some_val = Some(5);

match some_val {
    Some(x) if x < 10 => println!("小さい数: {}", x),
    Some(x) => println!("数: {}", x),
    None => println!("値なし"),
}
```

---

## 8. モジュールシステム

### 8.1 モジュールの定義と利用

Rustでは、`mod` キーワードを使ってモジュールを定義し、コードを整理します。

```rust
// main.rs
mod greetings;

fn main() {
    greetings::hello();
}

// greetings.rs
pub fn hello() {
    println!("Hello, Rust!");
}
```

### 8.2 パッケージとクレート

- **クレート**: ライブラリまたは実行可能ファイルとしてのコンパイル単位。
- **パッケージ**: 複数のクレートを含むプロジェクト。

Cargoを使って簡単にプロジェクト管理ができます。

```
cargo new my_project
cd my_project
cargo run
```

---

## 9. エラーハンドリング

Rustでは、エラーを`Result`型で処理するか、`panic!`でプログラムを停止させます。

```rust
use std::fs::File;

fn read_file() -> Result<File, std::io::Error> {
    let f = File::open("hello.txt")?; // ? 演算子でエラーチェック
    Ok(f)
}
```

---

## 10. まとめ

この記事では、Rustの基本的な構文から所有権、ライフタイム、構造体、列挙型、エラーハンドリングに至るまで、主要な概念を網羅的に解説しました。Rustは厳格な型システムと所有権システムを備えており、初学者にとっても最初は難しく感じるかもしれませんが、慣れてしまえば非常に強力なツールとなります。

さらなる学習のためには、公式ドキュメントやコミュニティのリソースを参考にすると良いでしょう。

参考文献:
- [The Rust Programming Language](https://doc.rust-lang.org/book/)
- [Rust公式ドキュメント](https://doc.rust-lang.org/)

Happy coding in Rust (´-ω-`)
