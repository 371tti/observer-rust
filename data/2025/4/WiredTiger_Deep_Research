# MongoDBのWiredTigerストレージエンジン徹底解説：アーキテクチャから整合性・パフォーマンスまで

MongoDB 4.0以降のデフォルトストレージエンジンとなったWiredTigerは、データ整合性と高性能を両立させるために設計されています。本記事では、アーキテクチャの核心部分からトランザクション管理、ジャーナリング、キャッシュ制御、MVCC、チェックポイント機構、コンカレンシー制御、圧縮設定などの技術詳細を深掘りします。初めてWiredTigerに触れる人から、運用・チューニング担当者まで、幅広く理解できる内容です。

---

## 1. アーキテクチャの全体像

### 1.1 MVCC（Multi-Version Concurrency Control）
- **ポイントインタイムスナップショット**: 読み取り時に一貫したデータビューを提供。更新中のデータと古いデータを同時に保持し、読み取り操作に影響を与えない。
- **スナップショット保持**: `minSnapshotHistoryWindowInSeconds`で保持期間を調整可能。長くするとディスク容量増加。

### 1.2 データ構造：Bツリーとログ構造
- **データ格納**: Bツリー構造による高速インデックス・データアクセス。
- **ログ構造マージ**: ジャーナルに書き込まれた変更をチェックポイント時にBツリーへ反映。

---

## 2. トランザクションとコンカレンシー制御

### 2.1 ドキュメントレベルロック + オプティミスティック制御
- **ドキュメント単位ロック**: 異なるドキュメントへの同時書き込みが可能で、コレクションロックより粒度が細かい。
- **インテントロック**: グローバル／DB／コレクションレベルでの衝突回避。
- **リトライ機構**: 衝突発生時はWiredTigerが自動で操作をリトライ。アプリ側の負担を軽減。

### 2.2 マルチドキュメント ACID トランザクション
- **2フェーズコミット**: ローカルレプリセット内での原子的コミット。
- **トランザクションジャーナリング**: トランザクション変更はジャーナルに書き込まれ、復旧時にリプレイされる。

---

## 3. ジャーナリングとチェックポイント

### 3.1 Write-Ahead Log（WAL）
- **耐障害性**: WALに先行して書き込み、チェックポイント前の変更も復旧可能。
- **圧縮**: Snappyデフォルト。他にzlib, zstdも設定可能。
- **レプリカセットでの必須性**: レプリカセットではジャーナル無効化不可。

### 3.2 チェックポイント機構
- **周期**: デフォルト60秒ごとに非同期で実行。
- **増分処理**: 前回チェックポイント以降の変更のみBツリーに反映。
- **フォールトトレランス**: チェックポイント中の失敗は無視され、次回有効なチェックポイントから復旧。

---

## 4. キャッシュ管理とEviction

### 4.1 メモリキャッシュ
- **サイズ**: デフォルトで物理メモリの50％-1GBまたは最小256MB。
- **内部プール**: データとインデックス用に分割可能。
- **調整**: `storage.wiredTiger.engineConfig.cacheSizeGB`で明示的設定。

### 4.2 Eviction Policy（追い出しポリシー）
- **LRUベース**: アクセス頻度に応じて古いページをディスクへ書き戻しつつ追い出し。
- **強制Eviction**: 大型トランザクションやバッチ処理でキャッシュ圧迫時に発動。

---

## 5. 圧縮機能

- **デフォルトSnappy**: 高速圧縮・解凍。
- **オプション**: zlib（高圧縮率）、zstd（バランス）。
- **インデックス圧縮**: プレフィックス圧縮でRAM使用量低減。

```javascript
// 例: zstd圧縮を持つコレクション作成
db.createCollection('mycol', {
  storageEngine: {
    wiredTiger: { configString: 'block_compressor=zstd' }
  }
});
```

---

## 6. 運用・チューニングポイント

1. **キャッシュサイズの最適化**: ワークロードに合わせてメモリ配分を検討。
2. **スナップショット保持期間**: 長すぎるとディスク増。分析用途なら延長。
3. **チェックポイント間隔**: 高頻度書き込み時は短縮でデータ損失リスク低減。
4. **圧縮アルゴリズム選択**: ストレージ容量 vs CPU負荷のトレードオフ。

---

## 7. まとめ
WiredTigerは、MVCC、ドキュメントレベルロック、WAL、チェックポイント、圧縮機能を統合し、高いデータ整合性とパフォーマンスを両立します。運用においてはキャッシュサイズ、チェックポイント間隔、圧縮設定のチューニングが重要です。最新情報や詳細設定はMongoDB公式ドキュメントを参照してください。

---

**参考文献**
- MongoDB Documentation: https://www.mongodb.com/docs/v6.0/core/wiredtiger/
- MongoDB Blog: https://www.mongodb.com/blog/post/
