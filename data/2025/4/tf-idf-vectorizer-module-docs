# tf-idf-vectorizer: モジュール単位ドキュメント

Rust 製 TF-IDF ベクトライザー「tf-idf-vectorizer」（371tti）の主要モジュールを詳細解説。約10分で読み切れる構成です。

## 1. はじめに
「tf-idf-vectorizer」は、情報検索やテキストマイニングの定番手法 TF-IDF を Rust で実装。高速並列処理、柔軟な前処理、シンプル API が特徴。

### 特徴
- 高速並列処理（Rayon）
- 柔軟なトークン正規化
- モジュールごとに疎結合な設計

## 2. vectorizer::token
### TokenFrequency
トークン出現頻度を集計し、TF/IDF 計算の核。

主なメソッド:
- new(): 初期化
- add_tokens(tokens): トークンを追加
- tf_calc / idf_calc: TF・IDF 算出
- tf_vector_ref_str: 全トークン TF 取得
- idf_vector_ref_str: 全トークン IDF 取得
- remove_tokens_by_condition: 条件でトークン除外
- sorted_frequency_vector: 出現順ソート
- unique_token_ratio: 多様度計算
- clear: 全リセット

内部:
- IndexMap<String, u32> と u64 で管理
- TF=(ln(count+1)/ln(max+1))、IDF=(ln(1+N/(1+df))/ln(idf_max)) で正規化

## 3. vectorizer::tfidf
### TFIDFVectorizer
コーパス全体の管理とベクトル生成。

主なメソッド:
- new(): 初期化
- add_corpus(tokens): 新ドキュメントを追加
- tf_idf_vector(tokens): クエリ TF-IDF 取得
- idf_map(): コーパス全体の IDF マップ
- clear(): 初期化

内部:
- Vec<TokenFrequency> でドキュメント管理
- コーパス長から IDF を算出
- ベクトルは (token, score) 列で重み付きソート

## 4. vectorizer::index
### Index
TF-IDF ベクトルを用いたインデクシングと検索。

主なメソッド:
- new(): 初期化
- add_doc(id, tokens): ドキュメント登録
- generate_query(tokens): クエリベクトル
- search_cosine_similarity_parallel(query, threads): 並列検索
- clear(): 初期化

内部:
- HashMap<String, Vec<(String, f64)>> で DocVector 保存
- Cosine = 内積/（ノルム×ノルム）を Rayon で並列処理

## 5. データフロー
1. Index::new() 生成
2. add_doc → TFIDFVectorizer.add_corpus → TokenFrequency 更新 → DocVector 生成
3. generate_query → TF-IDF ベクトル取得
4. search_cosine_similarity_parallel → 全 Doc と類似度計算 → 結果ソート

## 6. 実践例
```rust
use tf_idf_vectorizer::{vectorizer::index::Index, vectorizer::tfidf::TFIDFVectorizer};
// ドキュメント登録
let docs = vec![
    ("d1", vec!["rust","高速","並列"]),
    ("d2", vec!["tf-idf","情報検索"]),
    ("d3", vec!["rust","tf-idf","アルゴリズム"]),
];
let mut index = Index::new();
for (id, tokens) in &docs {
    index.add_doc(id.to_string(), tokens);
}
// クエリ検索
let query = index.generate_query(&["rust","アルゴリズム"]);
let results = index.search_cosine_similarity_parallel(&query, 8);
println!("{:#?}", results);
```

### チューニング
- Rayon スレッド数調整
- 前処理: ストップワード除去・ステミング
- 並列チャンクサイズ最適化

## 7. まとめ
Rust で高速＆拡張性の高い TF-IDF ベクトライザを実現。ぜひ GitHub からソースをチェックして、ご活用ください。

---
ソース: https://github.com/371tti/tf-idf-vectorizer
ライセンス: MIT