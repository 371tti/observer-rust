# Javaで爆速フィボナッチ数列出力プログラム

以下では、`Scanner`で入力したn項目までのフィボナッチ数列を「爆速」で出力するJavaプログラムの実装例と解説を示します。

## 実装例
```java
import java.math.BigInteger;
import java.util.Scanner;

public class FastFibonacci {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("n を入力：");
        int n = sc.nextInt();
        sc.close();
        if (n <= 0) {
            System.out.println("正の整数を入力してください。");
            return;
        }
        
        // 0,1,1,... を n 項出力
        for (int i = 0; i < n; i++) {
            BigInteger fib = fibFastDoubling(i);
            System.out.print(fib + (i < n - 1 ? " " : "\n"));
        }
    }

    // fast doubling: F(2k) = F(k) * [2*F(k+1) – F(k)]
    //                  F(2k+1) = F(k+1)^2 + F(k)^2
    private static BigInteger fibFastDoubling(int k) {
        return fibPair(k)[0];
    }

    // returns {F(k), F(k+1)} を返す
    private static BigInteger[] fibPair(int k) {
        if (k == 0) {
            return new BigInteger[]{BigInteger.ZERO, BigInteger.ONE};
        }
        BigInteger[] half = fibPair(k >>> 1);
        BigInteger a = half[0]; // F(m)
        BigInteger b = half[1]; // F(m+1)
        
        // c = F(2m) = a * (2*b – a)
        BigInteger twoBminusA = b.shiftLeft(1).subtract(a);
        BigInteger c = a.multiply(twoBminusA);
        
        // d = F(2m+1) = a^2 + b^2
        BigInteger d = a.multiply(a).add(b.multiply(b));
        
        if ((k & 1) == 0) {
            return new BigInteger[]{c, d};
        } else {
            // odd: F(2m+1), F(2m+2)
            return new BigInteger[]{d, c.add(d)};
        }
    }
}
```

### 解説

1. **Fast Doubling** アルゴリズムで計算量を O(log n) に
   - 一般的な再帰やループによる逐次計算は O(n) または O(n^2) ですが、fast doublingでは指数を二分割しながら計算
   - 再帰の深さも最大 O(log n)

2. **BigInteger** で任意桁数に対応
   - `long`型だとオーバーフローする大きなnにも安心
   - 数万〜十万項レベルでも扱える

3. **実行例**
```
> n を入力：10
0 1 1 2 3 5 8 13 21 34
```

これで「爆速に」かつ「大きな項数にも耐える」フィボナッチ数列出力プログラムが完成です！