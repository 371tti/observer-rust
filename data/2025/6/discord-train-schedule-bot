# Discord Botで乗り換え＆遅延対応テキストエディタ不要アラートアプリの記事

以下の記事では、JavaScript（Node.js）＋discord.jsを使い、#大和路線→#奈良線 の2段階マッピングと遅延オフセット、さらには降車3分前通知機能を備えたDiscordボットを作成する手順を解説します。

---

## 仕様概要

- コマンド：`!time HH:MM [d:遅延分]`
- 大和路線の出発時刻→奈良駅到着時刻を1段階マッピング
- 奈良線の奈良駅乗車時刻→降車駅＆到着時刻を2段階マッピング
- 時刻が完全一致しない場合、最も近いものを自動選択
- 遅延（`d:5`など）を指定可能
- 降車時刻の3分前に自動通知

## ファイル構成

```
project/
├ index.js        # メインコード
└ schedule.json   # マッピングデータ
```

### schedule.json

```json
{
  "daiwa": {
    "14:40": "14:48",
    "14:55": "15:03",
    "15:10": "15:18",
    "15:25": "15:33",
    "15:41": "15:49",
    "15:56": "16:04",
    "16:11": "16:19",
    "16:26": "16:34",
    "16:41": "16:49"
  },
  "nara": {
    "14:50": { "station": "山城多賀", "arrive": "15:17" },
    "15:07": { "station": "玉水",     "arrive": "15:21" },
    "15:24": { "station": "山城多賀", "arrive": "15:47" },
    "15:37": { "station": "玉水",     "arrive": "15:51" },
    "15:54": { "station": "山城多賀", "arrive": "16:17" },
    "16:07": { "station": "玉水",     "arrive": "16:21" },
    "16:24": { "station": "山城多賀", "arrive": "16:47" },
    "16:37": { "station": "玉水",     "arrive": "16:51" },
    "16:54": { "station": "山城多賀", "arrive": "17:17" }
  }
}
```

### index.js

```js
const fs = require('fs');
const { Client, GatewayIntentBits } = require('discord.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const data = JSON.parse(fs.readFileSync('schedule.json', 'utf8'));
const PREFIX = '!';

// Utility: HH:MM ↔ 分数化
const toMin = s => {
  const [h, m] = s.split(':').map(Number);
  return h * 60 + m;
};
const toHHMM = m => {
  const hh = String(Math.floor(m / 60)).padStart(2, '0');
  const mm = String(m % 60).padStart(2, '0');
  return `${hh}:${mm}`;
};

// 最も近いキーを取得
const findNearest = (map, targetMin) =>
  Object.keys(map)
    .map(k => ({ key: k, diff: Math.abs(toMin(k) - targetMin) }))
    .sort((a, b) => a.diff - b.diff)[0].key;

client.on('messageCreate', async msg => {
  if (msg.author.bot) return;
  if (!msg.content.startsWith(PREFIX)) return;

  const parts = msg.content.slice(PREFIX.length).trim().split(/\s+/);
  const time = parts[1];
  const delayPart = parts.find(p => p.startsWith('d:'));
  const delay = delayPart ? Number(delayPart.slice(2)) : 0;
  if (!time) return msg.reply('時刻を `!time HH:MM [d:分]` で指定してください');

  // 1段階：大和路線 → 奈良到着
  const departMin = toMin(time) + delay;
  const daiwaKey = findNearest(data.daiwa, departMin);
  const naraDepMin = toMin(data.daiwa[daiwaKey]);

  // 2段階：奈良線 → 降車
  const naraKey = findNearest(data.nara, naraDepMin);
  const { station, arrive } = data.nara[naraKey];

  // 即時レスポンス
  await msg.reply(`出発: ${time} (+${delay}分) → 奈良: ${daiwaKey} → ${station} 着 ${arrive}`);

  // 降車3分前通知のスケジューリング
  const arriveMin = toMin(arrive);
  const notifyMin = arriveMin - 3;
  const now = new Date();
  const target = new Date();
  target.setHours(Math.floor(notifyMin / 60));
  target.setMinutes(notifyMin % 60);
  target.setSeconds(0);
  const delayMs = target - now;

  if (delayMs > 0) {
    setTimeout(() => {
      msg.channel.send(`${msg.author} そろそろ ${station} 降車3分前です`);
    }, delayMs);
  }
});

client.login(process.env.DISCORD_TOKEN);
```  

## 動作確認

1. `npm install discord.js`
2. 環境変数 `DISCORD_TOKEN` を設定
3. `node index.js` で起動
4. Discordサーバーで `!time 14:40 d:2` 等を送信

---

**参考**
- discord.js: https://discord.js.org/
- JavaScript Date/Timer
- JSONデータハンドリング 

以上、ぜひ試してみてください。