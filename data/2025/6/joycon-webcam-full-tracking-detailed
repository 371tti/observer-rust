# Joy-ConとWebカメラによるフルトラッキングソフト詳細設計

## 1. はじめに
この記事では、前回公開した仕様に沿って実際の実装詳細を肉付けします。Rust+C#によるモジュール構成、開発フロー、主要インターフェース、テスト戦略までを解説。

---

## 2. 開発環境と依存ライブラリ

- Rust 1.70+
- C# .NET 7 / Unity 2022.3 LTS
- Node.js 18.x (補助サーバ、Electron)
- Python 3.10+ (MediaPipe用)

### Rust側依存
```
[dependencies]
btleplug = "0.9"
opencv = "0.70"
tokio = { version = "1.28", features = ["full"] }
warp = "0.3"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
```  

### C#側依存 (Unity)
```csharp
// Unityパッケージマネージャー
com.unity.websocket = "1.0.0"
com.unity.inputsystem = "1.1.1"
Newtonsoft.Json (NuGet)
```  

---

## 3. アーキテクチャ
```
Joy-Con（Rust） --(JSON/WS)--> 通信サーバ（Rust Warp） --
                                                  |
カメラ姿勢推定（Rust OpenCV + MediaPipe）
                                                  |
                              Unity + IK ロジック (C#)
```  

1. **Joy-Con入力モジュール** (Rust)
   - `btleplug`でBluetooth LE接続
   - バッテリー/ジャイロ/加速度値取得 (100Hz)
   - JSONにシリアライズしてWebSocketブロードキャスト

2. **姿勢推定モジュール** (Rust)
   - Webカメラ映像キャプチャ (OpenCV)
   - Pythonプロセス呼び出し or FFIでMediaPipe Holisticランドマーク検出
   - ランドマーク座標をWSで配信 (30fps)

3. **通信サーバ** (Rust Warp)
   - `/joycon` `/pose` 2つのWSエンドポイント提供
   - クライアント接続管理、バッファ制御

4. **Unityプラグイン & IK制御** (C#)
   - `WebSocketClient`で両WSに接続
   - JSONをC#クラスにデシリアライズ
   - ボーン回転・位置計算 (C# IKソルバー)
   - アバターにリアルタイム反映

5. **設定UI** (Electron + React)
   - BLEデバイスリスト、カメラ選択
   - ネットワーク設定 (IP/Port)
   - キャリブレーションウィザード

---

## 4. 通信プロトコル仕様
### Joy-Con WS (`ws://<host>:port/joycon`)
```json
{
  "device": "left" | "right",
  "battery": 0-100,
  "gyro": {"x":0,"y":0,"z":0},
  "accel": {"x":0,"y":0,"z":0},
  "timestamp": 123456789
}
```

### Pose WS (`ws://<host>:port/pose`)
```json
{
  "landmarks": [
    {"name":"nose","x":0.5,"y":0.5,"z":0.0},
    ...
  ],
  "timestamp": 123456789
}
```

---

## 5. テスト戦略
- **Rustモジュール**: `cargo test` + CI (GitHub Actions)
- **Unityプラグイン**: PlayMode テスト + Artifact ビルドパイプライン
- **通信遅延測定**: ループバックテストで平均40ms以下確認
- **メモリ/CPUプロファイル**: `perf` / Unity Profiler

---

## 6. 今後の展望
- 複数カメラ対応（深度センサー併用）
- 手指関節の詳細トラッキング
- モバイルアプリ化（Rust=>WASM）

---
*詳細なコードサンプルやチュートリアルは別記事で公開予定。*
