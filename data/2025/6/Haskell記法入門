# Haskell 記法入門

## 1. はじめに
- Haskellは純粋関数型言語であり、副作用を極力排除しながらコードを記述します。
- 関数適用やパイプラインなど独特の記法があります。

## 2. 基本的な関数適用
```haskell
-- 通常の関数適用
sum [1,2,3]  -- 6

-- 中置演算子
1 + 2         -- 3

-- 中置演算子を関数として使う
(+) 1 2       -- 3

-- セクション
(1+) 2        -- 3
```

## 3. ラムダ式
```haskell
-- 無名関数
\x -> x + 1
gmap (\x -> x * 2) [1,2,3]  -- [2,4,6]
```

## 4. 関数合成
```haskell
-- . は関数合成
f . g = \x -> f (g x)

-- 例
import Data.Char (toUpper)
map toUpper . filter (/= ' ') $ "hello world"  -- "HELLOWORLD"
```

## 5. パイプ演算子
```haskell
-- Haskellには標準で|> はないが、インポートで利用可能
import Data.Function ((&))

-- & を使う
"hello" & map toUpper & (++ "!")  -- "HELLO!"
```

## 6. パターンマッチ
```haskell
-- リストの先頭と残りを取得
head' :: [a] -> a
head' []     = error "empty list"
head' (x:_)  = x
```

## 7. ガード
```haskell
abs' :: (Num a, Ord a) => a -> a
abs' x
  | x < 0     = -x
  | otherwise = x
```

## 8. let と where
```haskell
-- let in 構文
let square x = x * x in square 3  -- 9

-- where 構文
distance p q = sqrt (dx*dx + dy*dy)
  where dx = x2 - x1
        dy = y2 - y1
        (x1,y1) = p
        (x2,y2) = q
```

## 9. do 記法
```haskell
-- IOモナドでよく使う
do
  putStrLn "Name?"
  name <- getLine
  putStrLn ("Hello, " ++ name)
```

## 10. モナド演算子 (>>=)
```haskell
-- do 記法の裏側
getLine >>= \name -> putStrLn ("Hi " ++ name)
```

---
この記事ではHaskellの基本的な記法を一通り紹介しました。これを元に次は型クラスやより高度なモナドの使い方を学んでいきましょう。
