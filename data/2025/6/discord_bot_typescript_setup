# Discord Bot を TypeScript で作成するガイド

このドキュメントでは、Discord.js v14 を使い、TypeScript でシンプルなDiscordボットを構築する手順とサンプルコードを紹介します。

## 前提条件

- Node.js v16.9.0 以上
- npm または yarn
- DiscordアプリケーションとBotトークン取得済み

## 1. プロジェクト作成
```bash
mkdir discord-bot-ts
cd discord-bot-ts
npm init -y
```

## 2. 必要パッケージをインストール
```bash
npm install discord.js dotenv
npm install -D typescript ts-node @types/node
```

## 3. TypeScript 設定
```bash
npx tsc --init
```
`tsconfig.json`の主な設定例:
```json
{
  "target": "es2021",
  "module": "commonjs",
  "strict": true,
  "outDir": "dist"
}
```

## 4. 環境変数ファイル作成
プロジェクトルートに `.env` を作成:
```
DISCORD_TOKEN=あなたのボットトークン
```

## 5. ボット実装 (src/index.ts)
```ts
import { Client, GatewayIntentBits } from 'discord.js';
import dotenv from 'dotenv';

dotenv.config();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', () => {
  console.log(`Logged in as ${client.user?.tag}`);
});

client.on('messageCreate', message => {
  if (message.author.bot) return;
  if (message.content === '!ping') {
    message.channel.send('Pong!');
  }
});

client.login(process.env.DISCORD_TOKEN);
```

## 6. スクリプト追加
`package.json`に以下を追加:
```json
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "ts-node src/index.ts"
  }
```

## 7. 起動・テスト
```bash
npm run dev
```
- Discordで `!ping` と送信すると `Pong!` と返答されれば成功です。

---

以上が基本的なセットアップです。必要に応じてコマンドハンドラーやイベント分割を導入してください。